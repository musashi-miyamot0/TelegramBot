from aiogram import Router, F
from aiogram.types import Message


from controller import control_variable, Control
from filters.user_valid import ValidationUser
from filters.valid_getfile import ValidGetDocument
from filters.validation_var_for_keyboard import ValidationVariable, ValidAllVariables
from modules.screenshot_pc import ScreenshotPC
import all_keyboard as kb
from filters.validation_var_for_keyboard import ValidHotKey
from filters.terminal_valid import TerminalValidation
router_windows = Router()


@router_windows.message(ValidationUser(), F.text == "/start")
async def command_start(message: Message):
    """
    Start command handler.
    """
    await message.delete()
    await message.answer(text="–ü—Ä–∏–≤–µ—Ç –¥–æ—Ä–æ–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", reply_markup=kb.kb_menu)


@router_windows.message(ValidationUser(), ValidAllVariables(), F.text == "–ü–∏—Ç–∞–Ω–∏–µüîã")
async def pitanie(message: Message):
    """
    Power menu handler.
    """
    await message.delete()
    await message.answer(text="–ü–∏—Ç–∞–Ω–∏–µ", reply_markup=kb.kb_changer)

# Off your PC


@router_windows.message(ValidationUser(), ValidAllVariables(), F.text == "–í—ã–∫–ª—é—á–∏—Ç—å‚ùå")
async def off(message: Message):
    """
    Turn off PC handler.
    """
    with Control() as c:
        c.nutrition.off()

# Reboot your PC


@router_windows.message(ValidationUser(), ValidAllVariables(), F.text == "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞üîÑ")
async def reboot(message: Message):
    """
    Reboot PC handler.
    """
    with Control() as c:
        c.nutrition.reboot()

# Activate sleep mode on your PC


@router_windows.message(ValidationUser(), ValidAllVariables(), F.text == "–°–ø—è—â–∏–π —Ä–µ–∂–∏–ºüí§")
async def sleep(message: Message):
    """
    Sleep mode handler.
    """

    with Control() as c:
        c.nutrition.sleep_mode()

# Return volume keyboard


@router_windows.message(ValidationUser(), ValidAllVariables(), F.text == "–ó–≤—É–∫üîâ")
async def volume(message: Message):
    """
    Volume menu handler.
    """
    await message.delete()
    await message.answer(text="–ú–µ–Ω—é –∑–≤—É–∫–∞", reply_markup=kb.kb_volume)

# Create screenshot and send to chat


@router_windows.message(ValidationUser(), ValidAllVariables(), F.text == "–§–æ—Ç–æüì∑")
async def nutrition(message: Message):
    """
    Screenshot handler.
    """
    await message.delete()
    obj = ScreenshotPC()
    await obj.scren_windows(message)


@router_windows.message(ValidationUser(), ValidAllVariables(), F.text == "+10% –∫ —Ç–µ–∫—É—â–µ–π –≥—Ä–æ–º–∫–æ—Å—Ç–∏‚ûï")
async def volume_plus(message: Message):
    """
    Volume increase handler.
    """

    with Control() as c:
        c.pycaw.minus_and_plus(increase=True)


@router_windows.message(ValidationUser(), ValidAllVariables(), F.text == "-10% –∫ —Ç–µ–∫—É—â–µ–π –≥—Ä–æ–º–∫–æ—Å—Ç–∏‚ûñ")
async def volume_minus(message: Message):
    """
    Volume decrease handler.
    """
    with Control() as c:
        c.pycaw.minus_and_plus(increase=False)


@router_windows.message(ValidationUser(), ValidAllVariables(), F.text == "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—åüîä")
async def volume_max(message: Message):
    """
    Max volume handler.
    """
    with Control() as c:
        c.pycaw.maximum_and_minimum(1.0)


@router_windows.message(ValidationUser(), ValidAllVariables(), F.text == "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—èüîà")
async def volume_minimum(message: Message):
    """
    Min volume handler.
    """
    with Control() as c:
        c.pycaw.maximum_and_minimum(0.0)


@router_windows.message(ValidationUser(), ValidAllVariables(), F.text == "–ó–∞–º—É—Ç–∏—Ç—å –∑–≤—É–∫")
async def volume_mute(message: Message):
    """
    Mute volume handler.
    """
    await message.delete()
    with Control() as c:
        c.pycaw.mute(True)


@router_windows.message(ValidationUser(), ValidAllVariables(), F.text == "–†–∞–∑–º—É—Ç–∏—Ç—å –∑–≤—É–∫")
async def volume_unmete(message: Message):
    """
    Unmute volume handler.
    """
    await message.delete()
    with Control() as c:
        c.pycaw.mute(False)


@router_windows.message(ValidationUser(), ValidAllVariables(), F.text == "–¢–µ–∫—É—â–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å‚ùî")
async def current_vollume(message: Message):
    """
    Current volume handler.
    """
    await message.delete()
    with Control() as c:
        result = c.pycaw.current_volume_message()
    await message.answer(text=f"–¢–µ–∫—É—â–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å: {result}")


@router_windows.message(ValidationUser(), F.text == "–í—ã–π—Ç–∏ –≤ –º–µ–Ω—éüö™")
async def exit_menu(message: Message):
    """
    Exit menu handler.
    """
    setattr(control_variable, 'tracking_logic_keyboard', False)
    setattr(control_variable, 'tracking_logic_terminal', False)
    setattr(control_variable, 'hot_keys', False)
    setattr(control_variable, 'get_doc', False)
    await message.answer(text='–í—ã –≤—ã—à–ª–∏ –≤ –º–µ–Ω—é', reply_markup=kb.kb_menu)


@router_windows.message(ValidationUser(), F.text == "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–≤–æ–¥ —Å–ª–æ–≤‚å®Ô∏è")
async def keyboard(message: Message) -> None:
    """
    Keyboard input menu handler.
    """
    await message.delete()
    await message.answer(text='–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞', reply_markup=kb.kb_exit_menu)
    setattr(control_variable, 'tracking_logic_keyboard', True)


@router_windows.message(ValidationUser(), ValidationVariable())
async def key_write(message: Message):
    """
    Keyboard input handler.
    """
    await message.delete()
    with Control() as cn:
        await cn.keyboard.write_word(message.text)


@router_windows.message(ValidationUser(), ValidAllVariables(), F.text == '–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª‚è¨')
async def launch_doc(message: Message):
    """
    Launch document handler.
    """
    await message.delete()
    if hasattr(control_variable, 'get_doc'):
        setattr(control_variable, 'get_doc', True)
    else:
        print("Error in summon method get_doc")
    await message.answer(text='–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–ª–æ–≤', reply_markup=kb.kb_exit_menu)


@router_windows.message(ValidGetDocument(), ValidationUser())
async def get_document_from_pc(message: Message):
    """
    Get document from PC handler.
    """
    with Control() as cn:
        await cn.file.get_file(message.text, message)
    await message.delete()


@router_windows.message(ValidationUser(), ValidAllVariables(), F.text == '–¢–µ—Ä–º–∏–Ω–∞–ªüë®üèΩ‚Äçüíª')
async def terminal(message: Message):

    if hasattr(control_variable, 'tracking_logic_terminal'):
        setattr(control_variable, 'tracking_logic_terminal', True)
        await message.answer(text='–¢–µ—Ä–º–∏–Ω–∞–ª', reply_markup=kb.kb_exit_menu)
    else:
        await message.answer(text='–¢–∞–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–æ–π –Ω–µ—Ç')


@router_windows.message(TerminalValidation(), ValidationUser())
async def terminal_validation(message: Message):
    with Control() as cn:
        await cn.terminal.os_pc(message.text, message)


@router_windows.message(ValidationUser(), ValidAllVariables(), F.text == '–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏üî•')
async def hot_key(message: Message):
    '''
    handler for hot key
    '''
    await message.delete()
    if hasattr(control_variable, 'hot_keys'):
        setattr(control_variable, 'hot_keys', True)
        await message.answer(text='–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏', reply_markup=kb.kb_exit_menu)
    else:
        raise AttributeError


@router_windows.message(ValidationUser(), ValidHotKey())
async def hotkey(message: Message):
    '''
    handler for hot key
    '''
    await message.delete()
    with Control() as cn:
        try:
            await cn.keyboard.hotkey_input(message.text.split(' '))

        except Exception as e:

            print(f"Error in summon method hot_key,{e}")


@router_windows.message()
async def f_but(message: Message):
    """
    Function button handler.
    """
    await message.delete()
